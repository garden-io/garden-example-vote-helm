image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 10.6.0
  pullPolicy: Always
  debug: false
volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: latest
    pullPolicy: Always
  securityContext:
    runAsUser: 0
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
replication:
  enabled: false
  user: repl_user
  password: repl_password
  slaveReplicas: 1
  synchronousCommit: 'off'
  numSynchronousReplicas: 0
  applicationName: my_application
postgresqlUsername: postgres
service:
  type: ClusterIP
  port: 5432
  annotations: {}
persistence:
  enabled: true
  mountPath: /bitnami/postgresql
  accessModes:
    - ReadWriteOnce
  size: 8Gi
  annotations: {}
updateStrategy:
  type: RollingUpdate
master:
  nodeSelector: {}
  affinity: {}
  tolerations: []
slave:
  nodeSelector: {}
  affinity: {}
  tolerations: []
resources:
  requests:
    memory: 256Mi
    cpu: 250m
networkPolicy:
  enabled: false
  allowExternal: true
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
metrics:
  enabled: false
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port: '9187'
    loadBalancerIP: null
  image:
    registry: docker.io
    repository: wrouesnel/postgres_exporter
    tag: v0.4.6
    pullPolicy: IfNotPresent
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
extraEnv: {}
fullnameOverride: postgres
postgresqlPassword: postgres
